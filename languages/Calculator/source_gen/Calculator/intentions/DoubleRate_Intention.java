package Calculator.intentions;

/*Generated by MPS */

import jetbrains.mps.intentions.BaseIntention;
import jetbrains.mps.intentions.Intention;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.nodeEditor.EditorContext;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;

public class DoubleRate_Intention extends BaseIntention implements Intention {
  public DoubleRate_Intention() {
  }

  public String getConcept() {
    return "jetbrains.mps.baseLanguage.structure.IntegerConstant";
  }

  public boolean isParameterized() {
    return false;
  }

  public boolean isErrorIntention() {
    return false;
  }

  public boolean isAvailableInChildNodes() {
    return false;
  }

  public String getDescription(final SNode node, final EditorContext editorContext) {
    return "Double the Rate";
  }

  public boolean isApplicable(final SNode node, final EditorContext editorContext) {
    if (!(this.isApplicableToNode(node, editorContext))) {
      return false;
    }
    return true;
  }

  public boolean isApplicableToNode(final SNode node, final EditorContext editorContext) {
    return SNodeOperations.getAncestor(node, "Calculator.structure.OutputField", false, false) != null;
  }

  public void execute(final SNode node, final EditorContext editorContext) {
    SNode newNode = SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.IntegerConstant", null);
    int currentValue = SPropertyOperations.getInteger(node, "value");
    SPropertyOperations.set(newNode, "value", "" + currentValue * 2);
    SNodeOperations.replaceWithAnother(node, newNode);
  }

  public String getLocationString() {
    return "Calculator.intentions";
  }
}
